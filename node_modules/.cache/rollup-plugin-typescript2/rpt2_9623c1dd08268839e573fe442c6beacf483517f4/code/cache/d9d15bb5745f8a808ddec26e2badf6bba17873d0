{"code":"import { Interface } from '@ethersproject/abi';\r\nimport { TradeType } from '@uniswap/sdk-core';\r\nimport { encodeRouteToPath, toHex } from './utils';\r\nimport IQuoter from '@uniswap/v3-periphery/artifacts/contracts/lens/Quoter.sol/Quoter.json';\r\nimport IQuoterV2 from '@uniswap/swap-router-contracts/artifacts/contracts/lens/QuoterV2.sol/QuoterV2.json';\r\nimport invariant from 'tiny-invariant';\r\n/**\r\n * Represents the Uniswap V3 QuoterV1 contract with a method for returning the formatted\r\n * calldata needed to call the quoter contract.\r\n */\r\nexport class SwapQuoter {\r\n    /**\r\n     * Produces the on-chain method name of the appropriate function within QuoterV2,\r\n     * and the relevant hex encoded parameters.\r\n     * @template TInput The input token, either Ether or an ERC-20\r\n     * @template TOutput The output token, either Ether or an ERC-20\r\n     * @param route The swap route, a list of pools through which a swap can occur\r\n     * @param amount The amount of the quote, either an amount in, or an amount out\r\n     * @param tradeType The trade type, either exact input or exact output\r\n     * @param options The optional params including price limit and Quoter contract switch\r\n     * @returns The formatted calldata\r\n     */\r\n    static quoteCallParameters(route, amount, tradeType, options = {}) {\r\n        const singleHop = route.pools.length === 1;\r\n        const quoteAmount = toHex(amount.quotient);\r\n        let calldata;\r\n        const swapInterface = options.useQuoterV2 ? this.V2INTERFACE : this.V1INTERFACE;\r\n        if (singleHop) {\r\n            const baseQuoteParams = {\r\n                tokenIn: route.tokenPath[0].address,\r\n                tokenOut: route.tokenPath[1].address,\r\n                fee: route.pools[0].fee,\r\n                sqrtPriceLimitX96: toHex(options?.sqrtPriceLimitX96 ?? 0)\r\n            };\r\n            const v2QuoteParams = {\r\n                ...baseQuoteParams,\r\n                ...(tradeType == TradeType.EXACT_INPUT ? { amountIn: quoteAmount } : { amount: quoteAmount })\r\n            };\r\n            const v1QuoteParams = [\r\n                baseQuoteParams.tokenIn,\r\n                baseQuoteParams.tokenOut,\r\n                baseQuoteParams.fee,\r\n                quoteAmount,\r\n                baseQuoteParams.sqrtPriceLimitX96\r\n            ];\r\n            const tradeTypeFunctionName = tradeType === TradeType.EXACT_INPUT ? 'quoteExactInputSingle' : 'quoteExactOutputSingle';\r\n            calldata = swapInterface.encodeFunctionData(tradeTypeFunctionName, options.useQuoterV2 ? [v2QuoteParams] : v1QuoteParams);\r\n        }\r\n        else {\r\n            invariant(options?.sqrtPriceLimitX96 === undefined, 'MULTIHOP_PRICE_LIMIT');\r\n            const path = encodeRouteToPath(route, tradeType === TradeType.EXACT_OUTPUT);\r\n            const tradeTypeFunctionName = tradeType === TradeType.EXACT_INPUT ? 'quoteExactInput' : 'quoteExactOutput';\r\n            calldata = swapInterface.encodeFunctionData(tradeTypeFunctionName, [path, quoteAmount]);\r\n        }\r\n        return {\r\n            calldata,\r\n            value: toHex(0)\r\n        };\r\n    }\r\n}\r\nSwapQuoter.V1INTERFACE = new Interface(IQuoter.abi);\r\nSwapQuoter.V2INTERFACE = new Interface(IQuoterV2.abi);\r\n//# sourceMappingURL=quoter.js.map","references":["/Users/luozhiwei/project/uniswap/v3-sdk/node_modules/@ethersproject/abi/lib/index.d.ts","/Users/luozhiwei/project/uniswap/v3-sdk/node_modules/@uniswap/sdk-core/dist/index.d.ts","/Users/luozhiwei/project/uniswap/v3-sdk/src/utils/index.ts","/Users/luozhiwei/project/uniswap/v3-sdk/node_modules/@uniswap/v3-periphery/artifacts/contracts/lens/Quoter.sol/Quoter.json","/Users/luozhiwei/project/uniswap/v3-sdk/node_modules/@uniswap/swap-router-contracts/artifacts/contracts/lens/QuoterV2.sol/QuoterV2.json","/Users/luozhiwei/project/uniswap/v3-sdk/src/entities/index.ts","/Users/luozhiwei/project/uniswap/v3-sdk/node_modules/tiny-invariant/dist/tiny-invariant.d.ts","/Users/luozhiwei/project/uniswap/v3-sdk/src/constants.ts"],"map":"{\"version\":3,\"file\":\"quoter.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/quoter.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,oBAAoB,CAAA;AAC9C,OAAO,EAAuC,SAAS,EAAE,MAAM,mBAAmB,CAAA;AAClF,OAAO,EAAE,iBAAiB,EAAoB,KAAK,EAAE,MAAM,SAAS,CAAA;AACpE,OAAO,OAAO,MAAM,uEAAuE,CAAA;AAC3F,OAAO,SAAS,MAAM,oFAAoF,CAAA;AAE1G,OAAO,SAAS,MAAM,gBAAgB,CAAA;AAyBtC;;;GAGG;AACH,MAAM,OAAgB,UAAU;IAI9B;;;;;;;;;;OAUG;IACI,MAAM,CAAC,mBAAmB,CAC/B,KAA6B,EAC7B,MAAwC,EACxC,SAAoB,EACpB,UAAwB,EAAE;QAE1B,MAAM,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAA;QAC1C,MAAM,WAAW,GAAW,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;QAClD,IAAI,QAAgB,CAAA;QACpB,MAAM,aAAa,GAAc,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAA;QAE1F,IAAI,SAAS,EAAE;YACb,MAAM,eAAe,GAAoB;gBACvC,OAAO,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO;gBACnC,QAAQ,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO;gBACpC,GAAG,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG;gBACvB,iBAAiB,EAAE,KAAK,CAAC,OAAO,EAAE,iBAAiB,IAAI,CAAC,CAAC;aAC1D,CAAA;YAED,MAAM,aAAa,GAAG;gBACpB,GAAG,eAAe;gBAClB,GAAG,CAAC,SAAS,IAAI,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,WAAW,EAAE,CAAC;aAC9F,CAAA;YAED,MAAM,aAAa,GAAG;gBACpB,eAAe,CAAC,OAAO;gBACvB,eAAe,CAAC,QAAQ;gBACxB,eAAe,CAAC,GAAG;gBACnB,WAAW;gBACX,eAAe,CAAC,iBAAiB;aAClC,CAAA;YAED,MAAM,qBAAqB,GACzB,SAAS,KAAK,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC,wBAAwB,CAAA;YAC1F,QAAQ,GAAG,aAAa,CAAC,kBAAkB,CACzC,qBAAqB,EACrB,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,aAAa,CACtD,CAAA;SACF;aAAM;YACL,SAAS,CAAC,OAAO,EAAE,iBAAiB,KAAK,SAAS,EAAE,sBAAsB,CAAC,CAAA;YAC3E,MAAM,IAAI,GAAW,iBAAiB,CAAC,KAAK,EAAE,SAAS,KAAK,SAAS,CAAC,YAAY,CAAC,CAAA;YACnF,MAAM,qBAAqB,GAAG,SAAS,KAAK,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,kBAAkB,CAAA;YAC1G,QAAQ,GAAG,aAAa,CAAC,kBAAkB,CAAC,qBAAqB,EAAE,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC,CAAA;SACxF;QACD,OAAO;YACL,QAAQ;YACR,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;SAChB,CAAA;IACH,CAAC;;AA9Da,sBAAW,GAAc,IAAI,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;AACnD,sBAAW,GAAc,IAAI,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,CAAA\"}","dts":{"name":"/Users/luozhiwei/project/uniswap/v3-sdk/quoter.d.ts","writeByteOrderMark":false,"text":"import { Interface } from '@ethersproject/abi';\r\nimport { BigintIsh, Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core';\r\nimport { MethodParameters } from './utils';\r\nimport { Route } from './entities';\r\n/**\r\n * Optional arguments to send to the quoter.\r\n */\r\nexport interface QuoteOptions {\r\n    /**\r\n     * The optional price limit for the trade.\r\n     */\r\n    sqrtPriceLimitX96?: BigintIsh;\r\n    /**\r\n     * The optional quoter interface to use\r\n     */\r\n    useQuoterV2?: boolean;\r\n}\r\n/**\r\n * Represents the Uniswap V3 QuoterV1 contract with a method for returning the formatted\r\n * calldata needed to call the quoter contract.\r\n */\r\nexport declare abstract class SwapQuoter {\r\n    static V1INTERFACE: Interface;\r\n    static V2INTERFACE: Interface;\r\n    /**\r\n     * Produces the on-chain method name of the appropriate function within QuoterV2,\r\n     * and the relevant hex encoded parameters.\r\n     * @template TInput The input token, either Ether or an ERC-20\r\n     * @template TOutput The output token, either Ether or an ERC-20\r\n     * @param route The swap route, a list of pools through which a swap can occur\r\n     * @param amount The amount of the quote, either an amount in, or an amount out\r\n     * @param tradeType The trade type, either exact input or exact output\r\n     * @param options The optional params including price limit and Quoter contract switch\r\n     * @returns The formatted calldata\r\n     */\r\n    static quoteCallParameters<TInput extends Currency, TOutput extends Currency>(route: Route<TInput, TOutput>, amount: CurrencyAmount<TInput | TOutput>, tradeType: TradeType, options?: QuoteOptions): MethodParameters;\r\n}\r\n"}}
