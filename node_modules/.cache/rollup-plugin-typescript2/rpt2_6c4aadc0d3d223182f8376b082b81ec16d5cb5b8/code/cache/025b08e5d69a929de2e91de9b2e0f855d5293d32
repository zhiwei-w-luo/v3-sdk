{"code":"import { pack } from '@ethersproject/solidity';\r\n/**\r\n * Converts a route to a hex encoded path\r\n * @param route the v3 path to convert to an encoded path\r\n * @param exactOutput whether the route should be encoded in reverse, for making exact output swaps\r\n */\r\nexport function encodeRouteToPath(route, exactOutput) {\r\n    const firstInputToken = route.input.wrapped;\r\n    const { path, types } = route.pools.reduce(({ inputToken, path, types }, pool, index) => {\r\n        const outputToken = pool.token0.equals(inputToken) ? pool.token1 : pool.token0;\r\n        if (index === 0) {\r\n            return {\r\n                inputToken: outputToken,\r\n                types: ['address', 'uint24', 'address'],\r\n                path: [inputToken.address, pool.fee, outputToken.address]\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                inputToken: outputToken,\r\n                types: [...types, 'uint24', 'address'],\r\n                path: [...path, pool.fee, outputToken.address]\r\n            };\r\n        }\r\n    }, { inputToken: firstInputToken, path: [], types: [] });\r\n    return exactOutput ? pack(types.reverse(), path.reverse()) : pack(types, path);\r\n}\r\n//# sourceMappingURL=encodeRouteToPath.js.map","references":["/Users/luozhiwei/project/uniswap/v3-sdk/node_modules/@ethersproject/solidity/lib/index.d.ts","/Users/luozhiwei/project/uniswap/v3-sdk/node_modules/@uniswap/sdk-core/dist/index.d.ts","/Users/luozhiwei/project/uniswap/v3-sdk/src/entities/pool.ts","/Users/luozhiwei/project/uniswap/v3-sdk/src/entities/route.ts"],"map":"{\"version\":3,\"file\":\"encodeRouteToPath.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/utils/encodeRouteToPath.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,yBAAyB,CAAA;AAK9C;;;;GAIG;AACH,MAAM,UAAU,iBAAiB,CAAC,KAAgC,EAAE,WAAoB;IACtF,MAAM,eAAe,GAAU,KAAK,CAAC,KAAK,CAAC,OAAO,CAAA;IAElD,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CACxC,CACE,EAAE,UAAU,EAAE,IAAI,EAAE,KAAK,EAAqE,EAC9F,IAAU,EACV,KAAK,EAC8D,EAAE;QACrE,MAAM,WAAW,GAAU,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAA;QACrF,IAAI,KAAK,KAAK,CAAC,EAAE;YACf,OAAO;gBACL,UAAU,EAAE,WAAW;gBACvB,KAAK,EAAE,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,CAAC;gBACvC,IAAI,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,GAAG,EAAE,WAAW,CAAC,OAAO,CAAC;aAC1D,CAAA;SACF;aAAM;YACL,OAAO;gBACL,UAAU,EAAE,WAAW;gBACvB,KAAK,EAAE,CAAC,GAAG,KAAK,EAAE,QAAQ,EAAE,SAAS,CAAC;gBACtC,IAAI,EAAE,CAAC,GAAG,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE,WAAW,CAAC,OAAO,CAAC;aAC/C,CAAA;SACF;IACH,CAAC,EACD,EAAE,UAAU,EAAE,eAAe,EAAE,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,CACrD,CAAA;IAED,OAAO,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAA;AAChF,CAAC\"}"}
