{"code":"import { CurrencyAmount, validateAndParseAddress, WETH9 } from '@uniswap/sdk-core';\r\nimport JSBI from 'jsbi';\r\nimport invariant from 'tiny-invariant';\r\nimport { Position } from './entities/position';\r\nimport { ONE, ZERO } from './internalConstants';\r\nimport { toHex } from './utils/calldata';\r\nimport { Interface } from '@ethersproject/abi';\r\nimport { abi } from '@uniswap/v3-periphery/artifacts/contracts/NonfungiblePositionManager.sol/NonfungiblePositionManager.json';\r\nimport { SelfPermit } from './selfPermit';\r\nimport { ADDRESS_ZERO } from './constants';\r\nconst MaxUint128 = toHex(JSBI.subtract(JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(128)), JSBI.BigInt(1)));\r\n// type guard\r\nfunction isMint(options) {\r\n    return Object.keys(options).some(k => k === 'recipient');\r\n}\r\nexport class NonfungiblePositionManager extends SelfPermit {\r\n    /**\r\n     * Cannot be constructed.\r\n     */\r\n    constructor() {\r\n        super();\r\n    }\r\n    static addCallParameters(position, options) {\r\n        invariant(JSBI.greaterThan(position.liquidity, ZERO), 'ZERO_LIQUIDITY');\r\n        const calldatas = [];\r\n        // get amounts\r\n        const { amount0: amount0Desired, amount1: amount1Desired } = position.mintAmounts;\r\n        // adjust for slippage\r\n        const minimumAmounts = position.mintAmountsWithSlippage(options.slippageTolerance);\r\n        const amount0Min = toHex(minimumAmounts.amount0);\r\n        const amount1Min = toHex(minimumAmounts.amount1);\r\n        const deadline = toHex(options.deadline);\r\n        // create pool if needed\r\n        if (isMint(options) && options.createPool) {\r\n            calldatas.push(NonfungiblePositionManager.INTERFACE.encodeFunctionData('createAndInitializePoolIfNecessary', [\r\n                position.pool.token0.address,\r\n                position.pool.token1.address,\r\n                position.pool.fee,\r\n                toHex(position.pool.sqrtRatioX96)\r\n            ]));\r\n        }\r\n        // permits if necessary\r\n        if (options.token0Permit) {\r\n            calldatas.push(NonfungiblePositionManager.encodePermit(position.pool.token0, options.token0Permit));\r\n        }\r\n        if (options.token1Permit) {\r\n            calldatas.push(NonfungiblePositionManager.encodePermit(position.pool.token1, options.token1Permit));\r\n        }\r\n        // mint\r\n        if (isMint(options)) {\r\n            const recipient = validateAndParseAddress(options.recipient);\r\n            calldatas.push(NonfungiblePositionManager.INTERFACE.encodeFunctionData('mint', [\r\n                {\r\n                    token0: position.pool.token0.address,\r\n                    token1: position.pool.token1.address,\r\n                    fee: position.pool.fee,\r\n                    tickLower: position.tickLower,\r\n                    tickUpper: position.tickUpper,\r\n                    amount0Desired: toHex(amount0Desired),\r\n                    amount1Desired: toHex(amount1Desired),\r\n                    amount0Min,\r\n                    amount1Min,\r\n                    recipient,\r\n                    deadline\r\n                }\r\n            ]));\r\n        }\r\n        else {\r\n            // increase\r\n            calldatas.push(NonfungiblePositionManager.INTERFACE.encodeFunctionData('increaseLiquidity', [\r\n                {\r\n                    tokenId: toHex(options.tokenId),\r\n                    amount0Desired: toHex(amount0Desired),\r\n                    amount1Desired: toHex(amount1Desired),\r\n                    amount0Min,\r\n                    amount1Min,\r\n                    deadline\r\n                }\r\n            ]));\r\n        }\r\n        let value = toHex(0);\r\n        if (options.useEther) {\r\n            const weth = WETH9[position.pool.chainId];\r\n            invariant(weth && (position.pool.token0.equals(weth) || position.pool.token1.equals(weth)), 'NO_WETH');\r\n            const wethValue = position.pool.token0.equals(weth) ? amount0Desired : amount1Desired;\r\n            // we only need to refund if we're actually sending ETH\r\n            if (JSBI.greaterThan(wethValue, ZERO)) {\r\n                calldatas.push(NonfungiblePositionManager.INTERFACE.encodeFunctionData('refundETH'));\r\n            }\r\n            value = toHex(wethValue);\r\n        }\r\n        return {\r\n            calldata: calldatas.length === 1\r\n                ? calldatas[0]\r\n                : NonfungiblePositionManager.INTERFACE.encodeFunctionData('multicall', [calldatas]),\r\n            value\r\n        };\r\n    }\r\n    static encodeCollect(options) {\r\n        const calldatas = [];\r\n        const tokenId = toHex(options.tokenId);\r\n        const involvesETH = options.expectedCurrencyOwed0.currency.isEther || options.expectedCurrencyOwed1.currency.isEther;\r\n        const recipient = validateAndParseAddress(options.recipient);\r\n        // collect\r\n        calldatas.push(NonfungiblePositionManager.INTERFACE.encodeFunctionData('collect', [\r\n            {\r\n                tokenId,\r\n                recipient: involvesETH ? ADDRESS_ZERO : recipient,\r\n                amount0Max: MaxUint128,\r\n                amount1Max: MaxUint128\r\n            }\r\n        ]));\r\n        if (involvesETH) {\r\n            const ethAmount = options.expectedCurrencyOwed0.currency.isEther\r\n                ? options.expectedCurrencyOwed0.quotient\r\n                : options.expectedCurrencyOwed1.quotient;\r\n            const token = options.expectedCurrencyOwed0.currency.isEther\r\n                ? options.expectedCurrencyOwed1.currency\r\n                : options.expectedCurrencyOwed0.currency;\r\n            const tokenAmount = options.expectedCurrencyOwed0.currency.isEther\r\n                ? options.expectedCurrencyOwed1.quotient\r\n                : options.expectedCurrencyOwed0.quotient;\r\n            calldatas.push(NonfungiblePositionManager.INTERFACE.encodeFunctionData('unwrapWETH9', [toHex(ethAmount), recipient]));\r\n            calldatas.push(NonfungiblePositionManager.INTERFACE.encodeFunctionData('sweepToken', [\r\n                token.address,\r\n                toHex(tokenAmount),\r\n                recipient\r\n            ]));\r\n        }\r\n        return calldatas;\r\n    }\r\n    static collectCallParameters(options) {\r\n        const calldatas = NonfungiblePositionManager.encodeCollect(options);\r\n        return {\r\n            calldata: calldatas.length === 1\r\n                ? calldatas[0]\r\n                : NonfungiblePositionManager.INTERFACE.encodeFunctionData('multicall', [calldatas]),\r\n            value: toHex(0)\r\n        };\r\n    }\r\n    /**\r\n     * Produces the calldata for completely or partially exiting a position\r\n     * @param position the position to exit\r\n     * @param options additional information necessary for generating the calldata\r\n     */\r\n    static removeCallParameters(position, options) {\r\n        const calldatas = [];\r\n        const deadline = toHex(options.deadline);\r\n        const tokenId = toHex(options.tokenId);\r\n        // construct a partial position with a percentage of liquidity\r\n        const partialPosition = new Position({\r\n            pool: position.pool,\r\n            liquidity: options.liquidityPercentage.multiply(position.liquidity).quotient,\r\n            tickLower: position.tickLower,\r\n            tickUpper: position.tickUpper\r\n        });\r\n        invariant(JSBI.greaterThan(partialPosition.liquidity, ZERO), 'ZERO_LIQUIDITY');\r\n        // slippage-adjusted underlying amounts\r\n        const { amount0: amount0Min, amount1: amount1Min } = partialPosition.burnAmountsWithSlippage(options.slippageTolerance);\r\n        if (options.permit) {\r\n            calldatas.push(NonfungiblePositionManager.INTERFACE.encodeFunctionData('permit', [\r\n                validateAndParseAddress(options.permit.spender),\r\n                tokenId,\r\n                toHex(options.permit.deadline),\r\n                options.permit.v,\r\n                options.permit.r,\r\n                options.permit.s\r\n            ]));\r\n        }\r\n        // remove liquidity\r\n        calldatas.push(NonfungiblePositionManager.INTERFACE.encodeFunctionData('decreaseLiquidity', [\r\n            {\r\n                tokenId,\r\n                liquidity: toHex(partialPosition.liquidity),\r\n                amount0Min: toHex(amount0Min),\r\n                amount1Min: toHex(amount1Min),\r\n                deadline\r\n            }\r\n        ]));\r\n        const { expectedCurrencyOwed0, expectedCurrencyOwed1, ...rest } = options.collectOptions;\r\n        calldatas.push(...NonfungiblePositionManager.encodeCollect({\r\n            tokenId: options.tokenId,\r\n            // add the underlying value to the expected currency already owed\r\n            expectedCurrencyOwed0: expectedCurrencyOwed0.add(expectedCurrencyOwed0.currency.isEther\r\n                ? CurrencyAmount.ether(amount0Min)\r\n                : CurrencyAmount.fromRawAmount(expectedCurrencyOwed0.currency, amount0Min)),\r\n            expectedCurrencyOwed1: expectedCurrencyOwed1.add(expectedCurrencyOwed1.currency.isEther\r\n                ? CurrencyAmount.ether(amount1Min)\r\n                : CurrencyAmount.fromRawAmount(expectedCurrencyOwed1.currency, amount1Min)),\r\n            ...rest\r\n        }));\r\n        if (options.liquidityPercentage.equalTo(ONE)) {\r\n            if (options.burnToken) {\r\n                calldatas.push(NonfungiblePositionManager.INTERFACE.encodeFunctionData('burn', [tokenId]));\r\n            }\r\n        }\r\n        else {\r\n            invariant(options.burnToken !== true, 'CANNOT_BURN');\r\n        }\r\n        return {\r\n            calldata: NonfungiblePositionManager.INTERFACE.encodeFunctionData('multicall', [calldatas]),\r\n            value: toHex(0)\r\n        };\r\n    }\r\n}\r\nNonfungiblePositionManager.INTERFACE = new Interface(abi);\r\n//# sourceMappingURL=nonfungiblePositionManager.js.map","references":["/Users/luozhiwei/project/uniswap/v3-sdk-3.0.0-alpha.6/node_modules/@uniswap/sdk-core/dist/index.d.ts","/Users/luozhiwei/project/uniswap/v3-sdk-3.0.0-alpha.6/node_modules/jsbi/jsbi.d.ts","/Users/luozhiwei/project/uniswap/v3-sdk-3.0.0-alpha.6/node_modules/tiny-invariant/dist/tiny-invariant.d.ts","/Users/luozhiwei/project/uniswap/v3-sdk-3.0.0-alpha.6/src/entities/position.ts","/Users/luozhiwei/project/uniswap/v3-sdk-3.0.0-alpha.6/src/internalConstants.ts","/Users/luozhiwei/project/uniswap/v3-sdk-3.0.0-alpha.6/src/utils/calldata.ts","/Users/luozhiwei/project/uniswap/v3-sdk-3.0.0-alpha.6/node_modules/@ethersproject/abi/lib/index.d.ts","/Users/luozhiwei/project/uniswap/v3-sdk-3.0.0-alpha.6/node_modules/@uniswap/v3-periphery/artifacts/contracts/NonfungiblePositionManager.sol/NonfungiblePositionManager.json","/Users/luozhiwei/project/uniswap/v3-sdk-3.0.0-alpha.6/src/selfPermit.ts","/Users/luozhiwei/project/uniswap/v3-sdk-3.0.0-alpha.6/src/constants.ts"],"map":"{\"version\":3,\"file\":\"nonfungiblePositionManager.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/nonfungiblePositionManager.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/luozhiwei/project/uniswap/v3-sdk-3.0.0-alpha.6/nonfungiblePositionManager.d.ts","writeByteOrderMark":false,"text":"import { BigintIsh, Percent, CurrencyAmount, Currency } from '@uniswap/sdk-core';\r\nimport { Position } from './entities/position';\r\nimport { MethodParameters } from './utils/calldata';\r\nimport { Interface } from '@ethersproject/abi';\r\nimport { PermitOptions, SelfPermit } from './selfPermit';\r\nexport interface MintSpecificOptions {\r\n    /**\r\n     * The account that should receive the minted NFT.\r\n     */\r\n    recipient: string;\r\n    /**\r\n     * Creates pool if not initialized before mint.\r\n     */\r\n    createPool?: boolean;\r\n}\r\nexport interface IncreaseSpecificOptions {\r\n    /**\r\n     * Indicates the ID of the position to increase liquidity for.\r\n     */\r\n    tokenId: BigintIsh;\r\n}\r\n/**\r\n * Options for producing the calldata to add liquidity.\r\n */\r\nexport interface CommonAddLiquidityOptions {\r\n    /**\r\n     * How much the pool price is allowed to move.\r\n     */\r\n    slippageTolerance: Percent;\r\n    /**\r\n     * When the transaction expires, in epoch seconds.\r\n     */\r\n    deadline: BigintIsh;\r\n    /**\r\n     * Whether to spend ether. If true, one of the pool tokens must be WETH, by default false\r\n     */\r\n    useEther?: boolean;\r\n    /**\r\n     * The optional permit parameters for spending token0\r\n     */\r\n    token0Permit?: PermitOptions;\r\n    /**\r\n     * The optional permit parameters for spending token1\r\n     */\r\n    token1Permit?: PermitOptions;\r\n}\r\nexport declare type MintOptions = CommonAddLiquidityOptions & MintSpecificOptions;\r\nexport declare type IncreaseOptions = CommonAddLiquidityOptions & IncreaseSpecificOptions;\r\nexport declare type AddLiquidityOptions = MintOptions | IncreaseOptions;\r\nexport interface CollectOptions {\r\n    /**\r\n     * Indicates the ID of the position to collect for.\r\n     */\r\n    tokenId: BigintIsh;\r\n    /**\r\n     * Expected value of tokensOwed0, including as-of-yet-unaccounted-for fees/liquidity value to be burned\r\n     */\r\n    expectedCurrencyOwed0: CurrencyAmount<Currency>;\r\n    /**\r\n     * Expected value of tokensOwed1, including as-of-yet-unaccounted-for fees/liquidity value to be burned\r\n     */\r\n    expectedCurrencyOwed1: CurrencyAmount<Currency>;\r\n    /**\r\n     * The account that should receive the tokens.\r\n     */\r\n    recipient: string;\r\n}\r\nexport interface NFTPermitOptions {\r\n    v: 0 | 1 | 27 | 28;\r\n    r: string;\r\n    s: string;\r\n    deadline: BigintIsh;\r\n    spender: string;\r\n}\r\n/**\r\n * Options for producing the calldata to exit a position.\r\n */\r\nexport interface RemoveLiquidityOptions {\r\n    /**\r\n     * The ID of the token to exit\r\n     */\r\n    tokenId: BigintIsh;\r\n    /**\r\n     * The percentage of position liquidity to exit.\r\n     */\r\n    liquidityPercentage: Percent;\r\n    /**\r\n     * How much the pool price is allowed to move.\r\n     */\r\n    slippageTolerance: Percent;\r\n    /**\r\n     * When the transaction expires, in epoch seconds.\r\n     */\r\n    deadline: BigintIsh;\r\n    /**\r\n     * Whether the NFT should be burned if the entire position is being exited, by default false.\r\n     */\r\n    burnToken?: boolean;\r\n    /**\r\n     * The optional permit of the token ID being exited, in case the exit transaction is being sent by an account that does not own the NFT\r\n     */\r\n    permit?: NFTPermitOptions;\r\n    /**\r\n     * Parameters to be passed on to collect\r\n     */\r\n    collectOptions: Omit<CollectOptions, 'tokenId'>;\r\n}\r\nexport declare abstract class NonfungiblePositionManager extends SelfPermit {\r\n    static INTERFACE: Interface;\r\n    /**\r\n     * Cannot be constructed.\r\n     */\r\n    private constructor();\r\n    static addCallParameters(position: Position, options: AddLiquidityOptions): MethodParameters;\r\n    private static encodeCollect;\r\n    static collectCallParameters(options: CollectOptions): MethodParameters;\r\n    /**\r\n     * Produces the calldata for completely or partially exiting a position\r\n     * @param position the position to exit\r\n     * @param options additional information necessary for generating the calldata\r\n     */\r\n    static removeCallParameters(position: Position, options: RemoveLiquidityOptions): MethodParameters;\r\n}\r\n"}}
