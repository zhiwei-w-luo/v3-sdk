{"code":"import { Interface } from '@ethersproject/abi';\r\nimport { TradeType, validateAndParseAddress } from '@uniswap/sdk-core';\r\nimport invariant from 'tiny-invariant';\r\nimport { ADDRESS_ZERO } from './constants';\r\nimport { SelfPermit } from './selfPermit';\r\nimport { encodeRouteToPath } from './utils';\r\nimport { toHex } from './utils/calldata';\r\nimport { abi } from '@uniswap/v3-periphery/artifacts/contracts/SwapRouter.sol/SwapRouter.json';\r\n/**\r\n * Represents the Uniswap V2 SwapRouter, and has static methods for helping execute trades.\r\n */\r\nexport class SwapRouter extends SelfPermit {\r\n    /**\r\n     * Cannot be constructed.\r\n     */\r\n    constructor() {\r\n        super();\r\n    }\r\n    /**\r\n     * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n     * @param trade to produce call parameters for\r\n     * @param options options for the call parameters\r\n     */\r\n    static swapCallParameters(trade, options) {\r\n        const calldatas = [];\r\n        // encode permit if necessary\r\n        if (options.inputTokenPermit) {\r\n            invariant(trade.inputAmount.currency.isToken, 'NON_TOKEN_PERMIT');\r\n            calldatas.push(SwapRouter.encodePermit(trade.inputAmount.currency, options.inputTokenPermit));\r\n        }\r\n        const recipient = validateAndParseAddress(options.recipient);\r\n        const deadline = toHex(options.deadline);\r\n        const amountIn = toHex(trade.maximumAmountIn(options.slippageTolerance).quotient);\r\n        const amountOut = toHex(trade.minimumAmountOut(options.slippageTolerance).quotient);\r\n        const value = trade.inputAmount.currency.isEther ? amountIn : toHex(0);\r\n        // flag for whether the trade is single hop or not\r\n        const singleHop = trade.route.pools.length === 1;\r\n        // flag for whether a refund needs to happen\r\n        const mustRefund = trade.inputAmount.currency.isEther && trade.tradeType === TradeType.EXACT_OUTPUT;\r\n        // flags for whether funds should be send first to the router\r\n        const outputIsEther = trade.outputAmount.currency.isEther;\r\n        const routerMustCustody = outputIsEther || !!options.fee;\r\n        if (singleHop) {\r\n            if (trade.tradeType === TradeType.EXACT_INPUT) {\r\n                const exactInputSingleParams = {\r\n                    tokenIn: trade.route.tokenPath[0].address,\r\n                    tokenOut: trade.route.tokenPath[1].address,\r\n                    fee: trade.route.pools[0].fee,\r\n                    recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\r\n                    deadline,\r\n                    amountIn,\r\n                    amountOutMinimum: amountOut,\r\n                    sqrtPriceLimitX96: toHex(options.sqrtPriceLimitX96 ?? 0)\r\n                };\r\n                calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactInputSingle', [exactInputSingleParams]));\r\n            }\r\n            else {\r\n                const exactOutputSingleParams = {\r\n                    tokenIn: trade.route.tokenPath[0].address,\r\n                    tokenOut: trade.route.tokenPath[1].address,\r\n                    fee: trade.route.pools[0].fee,\r\n                    recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\r\n                    deadline,\r\n                    amountOut,\r\n                    amountInMaximum: amountIn,\r\n                    sqrtPriceLimitX96: toHex(options.sqrtPriceLimitX96 ?? 0)\r\n                };\r\n                calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactOutputSingle', [exactOutputSingleParams]));\r\n            }\r\n        }\r\n        else {\r\n            invariant(options.sqrtPriceLimitX96 === undefined, 'MULTIHOP_PRICE_LIMIT');\r\n            const path = encodeRouteToPath(trade.route, trade.tradeType === TradeType.EXACT_OUTPUT);\r\n            if (trade.tradeType === TradeType.EXACT_INPUT) {\r\n                const exactInputParams = {\r\n                    path,\r\n                    recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\r\n                    deadline,\r\n                    amountIn,\r\n                    amountOutMinimum: amountOut\r\n                };\r\n                calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactInput', [exactInputParams]));\r\n            }\r\n            else {\r\n                const exactOutputParams = {\r\n                    path,\r\n                    recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\r\n                    deadline,\r\n                    amountOut,\r\n                    amountInMaximum: amountIn\r\n                };\r\n                calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactOutput', [exactOutputParams]));\r\n            }\r\n        }\r\n        // refund\r\n        if (mustRefund) {\r\n            calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('refundETH'));\r\n        }\r\n        // unwrap\r\n        if (routerMustCustody) {\r\n            if (!!options.fee) {\r\n                const feeRecipient = validateAndParseAddress(options.fee.recipient);\r\n                const fee = toHex(options.fee.fee.multiply(10000).quotient);\r\n                if (outputIsEther) {\r\n                    calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('unwrapWETH9WithFee', [amountOut, recipient, fee, feeRecipient]));\r\n                }\r\n                else {\r\n                    calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('sweepTokenWithFee', [\r\n                        trade.route.tokenPath[trade.route.tokenPath.length - 1].address,\r\n                        amountOut,\r\n                        recipient,\r\n                        fee,\r\n                        feeRecipient\r\n                    ]));\r\n                }\r\n            }\r\n            else {\r\n                calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('unwrapWETH9', [amountOut, recipient]));\r\n            }\r\n        }\r\n        return {\r\n            calldata: calldatas.length === 1 ? calldatas[0] : SwapRouter.INTERFACE.encodeFunctionData('multicall', [calldatas]),\r\n            value\r\n        };\r\n    }\r\n}\r\nSwapRouter.INTERFACE = new Interface(abi);\r\n//# sourceMappingURL=swapRouter.js.map","references":["/Users/luozhiwei/project/uniswap/v3-sdk-3.0.0-alpha.6/node_modules/@ethersproject/abi/lib/index.d.ts","/Users/luozhiwei/project/uniswap/v3-sdk-3.0.0-alpha.6/node_modules/@uniswap/sdk-core/dist/index.d.ts","/Users/luozhiwei/project/uniswap/v3-sdk-3.0.0-alpha.6/node_modules/tiny-invariant/dist/tiny-invariant.d.ts","/Users/luozhiwei/project/uniswap/v3-sdk-3.0.0-alpha.6/src/entities/trade.ts","/Users/luozhiwei/project/uniswap/v3-sdk-3.0.0-alpha.6/src/constants.ts","/Users/luozhiwei/project/uniswap/v3-sdk-3.0.0-alpha.6/src/selfPermit.ts","/Users/luozhiwei/project/uniswap/v3-sdk-3.0.0-alpha.6/src/utils/index.ts","/Users/luozhiwei/project/uniswap/v3-sdk-3.0.0-alpha.6/src/utils/calldata.ts","/Users/luozhiwei/project/uniswap/v3-sdk-3.0.0-alpha.6/node_modules/@uniswap/v3-periphery/artifacts/contracts/SwapRouter.sol/SwapRouter.json"],"map":"{\"version\":3,\"file\":\"swapRouter.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/swapRouter.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/luozhiwei/project/uniswap/v3-sdk-3.0.0-alpha.6/swapRouter.d.ts","writeByteOrderMark":false,"text":"import { Interface } from '@ethersproject/abi';\r\nimport { BigintIsh, Currency, Percent, TradeType } from '@uniswap/sdk-core';\r\nimport { Trade } from './entities/trade';\r\nimport { PermitOptions, SelfPermit } from './selfPermit';\r\nimport { MethodParameters } from './utils/calldata';\r\nexport interface FeeOptions {\r\n    /**\r\n     * The percent of the output that will be taken as a fee.\r\n     */\r\n    fee: Percent;\r\n    /**\r\n     * The recipient of the fee.\r\n     */\r\n    recipient: string;\r\n}\r\n/**\r\n * Options for producing the arguments to send calls to the router.\r\n */\r\nexport interface SwapOptions {\r\n    /**\r\n     * How much the execution price is allowed to move unfavorably from the trade execution price.\r\n     */\r\n    slippageTolerance: Percent;\r\n    /**\r\n     * The account that should receive the output.\r\n     */\r\n    recipient: string;\r\n    /**\r\n     * When the transaction expires, in epoch seconds.\r\n     */\r\n    deadline: BigintIsh;\r\n    /**\r\n     * The optional permit parameters for spending the input.\r\n     */\r\n    inputTokenPermit?: PermitOptions;\r\n    /**\r\n     * The optional price limit for the trade.\r\n     */\r\n    sqrtPriceLimitX96?: BigintIsh;\r\n    /**\r\n     * Optional information for taking a fee on output.\r\n     */\r\n    fee?: FeeOptions;\r\n}\r\n/**\r\n * Represents the Uniswap V2 SwapRouter, and has static methods for helping execute trades.\r\n */\r\nexport declare abstract class SwapRouter extends SelfPermit {\r\n    static INTERFACE: Interface;\r\n    /**\r\n     * Cannot be constructed.\r\n     */\r\n    private constructor();\r\n    /**\r\n     * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n     * @param trade to produce call parameters for\r\n     * @param options options for the call parameters\r\n     */\r\n    static swapCallParameters(trade: Trade<Currency, Currency, TradeType>, options: SwapOptions): MethodParameters;\r\n}\r\n"}}
