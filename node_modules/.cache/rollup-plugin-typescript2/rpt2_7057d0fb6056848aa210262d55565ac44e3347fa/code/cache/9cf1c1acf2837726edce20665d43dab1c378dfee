{"code":"import { validateAndParseAddress } from '@uniswap/sdk-core';\r\nimport { toHex } from './utils/calldata';\r\nimport { defaultAbiCoder, Interface } from '@ethersproject/abi';\r\nimport IUniswapV3Staker from '@uniswap/v3-staker/artifacts/contracts/UniswapV3Staker.sol/UniswapV3Staker.json';\r\nimport { Pool } from './entities';\r\nimport { Multicall } from './multicall';\r\nexport class Staker {\r\n    constructor() { }\r\n    /**\r\n     *  To claim rewards, must unstake and then claim.\r\n     * @param incentiveKey The unique identifier of a staking program.\r\n     * @param options Options for producing the calldata to claim. Can't claim unless you unstake.\r\n     * @returns The calldatas for 'unstakeToken' and 'claimReward'.\r\n     */\r\n    static encodeClaim(incentiveKey, options) {\r\n        const calldatas = [];\r\n        calldatas.push(Staker.INTERFACE.encodeFunctionData('unstakeToken', [\r\n            this._encodeIncentiveKey(incentiveKey),\r\n            toHex(options.tokenId)\r\n        ]));\r\n        const recipient = validateAndParseAddress(options.recipient);\r\n        const amount = options.amount ?? 0;\r\n        calldatas.push(Staker.INTERFACE.encodeFunctionData('claimReward', [incentiveKey.rewardToken.address, recipient, toHex(amount)]));\r\n        return calldatas;\r\n    }\r\n    /**\r\n     *\r\n     * Note:  A `tokenId` can be staked in many programs but to claim rewards and continue the program you must unstake, claim, and then restake.\r\n     * @param incentiveKeys An IncentiveKey or array of IncentiveKeys that `tokenId` is staked in.\r\n     * Input an array of IncentiveKeys to claim rewards for each program.\r\n     * @param options ClaimOptions to specify tokenId, recipient, and amount wanting to collect.\r\n     * Note that you can only specify one amount and one recipient across the various programs if you are collecting from multiple programs at once.\r\n     * @returns\r\n     */\r\n    static collectRewards(incentiveKeys, options) {\r\n        incentiveKeys = Array.isArray(incentiveKeys) ? incentiveKeys : [incentiveKeys];\r\n        let calldatas = [];\r\n        for (let i = 0; i < incentiveKeys.length; i++) {\r\n            // the unique program tokenId is staked in\r\n            const incentiveKey = incentiveKeys[i];\r\n            // unstakes and claims for the unique program\r\n            calldatas = calldatas.concat(this.encodeClaim(incentiveKey, options));\r\n            // re-stakes the position for the unique program\r\n            calldatas.push(Staker.INTERFACE.encodeFunctionData('stakeToken', [\r\n                this._encodeIncentiveKey(incentiveKey),\r\n                toHex(options.tokenId)\r\n            ]));\r\n        }\r\n        return {\r\n            calldata: Multicall.encodeMulticall(calldatas),\r\n            value: toHex(0)\r\n        };\r\n    }\r\n    /**\r\n     *\r\n     * @param incentiveKeys A list of incentiveKeys to unstake from. Should include all incentiveKeys (unique staking programs) that `options.tokenId` is staked in.\r\n     * @param withdrawOptions Options for producing claim calldata and withdraw calldata. Can't withdraw without unstaking all programs for `tokenId`.\r\n     * @returns Calldata for unstaking, claiming, and withdrawing.\r\n     */\r\n    static withdrawToken(incentiveKeys, withdrawOptions) {\r\n        let calldatas = [];\r\n        incentiveKeys = Array.isArray(incentiveKeys) ? incentiveKeys : [incentiveKeys];\r\n        const claimOptions = {\r\n            tokenId: withdrawOptions.tokenId,\r\n            recipient: withdrawOptions.recipient,\r\n            amount: withdrawOptions.amount\r\n        };\r\n        for (let i = 0; i < incentiveKeys.length; i++) {\r\n            const incentiveKey = incentiveKeys[i];\r\n            calldatas = calldatas.concat(this.encodeClaim(incentiveKey, claimOptions));\r\n        }\r\n        const owner = validateAndParseAddress(withdrawOptions.owner);\r\n        calldatas.push(Staker.INTERFACE.encodeFunctionData('withdrawToken', [\r\n            toHex(withdrawOptions.tokenId),\r\n            owner,\r\n            withdrawOptions.data ? withdrawOptions.data : toHex(0)\r\n        ]));\r\n        return {\r\n            calldata: Multicall.encodeMulticall(calldatas),\r\n            value: toHex(0)\r\n        };\r\n    }\r\n    /**\r\n     *\r\n     * @param incentiveKeys A single IncentiveKey or array of IncentiveKeys to be encoded and used in the data parameter in `safeTransferFrom`\r\n     * @returns An IncentiveKey as a string\r\n     */\r\n    static encodeDeposit(incentiveKeys) {\r\n        incentiveKeys = Array.isArray(incentiveKeys) ? incentiveKeys : [incentiveKeys];\r\n        let data;\r\n        if (incentiveKeys.length > 1) {\r\n            const keys = [];\r\n            for (let i = 0; i < incentiveKeys.length; i++) {\r\n                const incentiveKey = incentiveKeys[i];\r\n                keys.push(this._encodeIncentiveKey(incentiveKey));\r\n            }\r\n            data = defaultAbiCoder.encode([`${Staker.INCENTIVE_KEY_ABI}[]`], [keys]);\r\n        }\r\n        else {\r\n            data = defaultAbiCoder.encode([Staker.INCENTIVE_KEY_ABI], [this._encodeIncentiveKey(incentiveKeys[0])]);\r\n        }\r\n        return data;\r\n    }\r\n    /**\r\n     *\r\n     * @param incentiveKey An `IncentiveKey` which represents a unique staking program.\r\n     * @returns An encoded IncentiveKey to be read by ethers\r\n     */\r\n    static _encodeIncentiveKey(incentiveKey) {\r\n        const { token0, token1, fee } = incentiveKey.pool;\r\n        const refundee = validateAndParseAddress(incentiveKey.refundee);\r\n        return {\r\n            rewardToken: incentiveKey.rewardToken.address,\r\n            pool: Pool.getAddress(token0, token1, fee),\r\n            startTime: toHex(incentiveKey.startTime),\r\n            endTime: toHex(incentiveKey.endTime),\r\n            refundee\r\n        };\r\n    }\r\n}\r\nStaker.INTERFACE = new Interface(IUniswapV3Staker.abi);\r\nStaker.INCENTIVE_KEY_ABI = 'tuple(address rewardToken, address pool, uint256 startTime, uint256 endTime, address refundee)';\r\n//# sourceMappingURL=staker.js.map","references":["/Users/luozhiwei/project/uniswap/v3-sdk/node_modules/@uniswap/sdk-core/dist/index.d.ts","/Users/luozhiwei/project/uniswap/v3-sdk/src/utils/calldata.ts","/Users/luozhiwei/project/uniswap/v3-sdk/node_modules/@ethersproject/abi/lib/index.d.ts","/Users/luozhiwei/project/uniswap/v3-sdk/node_modules/@uniswap/v3-staker/artifacts/contracts/UniswapV3Staker.sol/UniswapV3Staker.json","/Users/luozhiwei/project/uniswap/v3-sdk/src/entities/index.ts","/Users/luozhiwei/project/uniswap/v3-sdk/src/multicall.ts"],"map":"{\"version\":3,\"file\":\"staker.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/staker.ts\"],\"names\":[],\"mappings\":\"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\"}"}
