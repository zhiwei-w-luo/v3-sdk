{"code":"import JSBI from 'jsbi';\r\nimport { NEGATIVE_ONE, ZERO } from '../internalConstants';\r\nimport { FullMath } from './fullMath';\r\nimport { SqrtPriceMath } from './sqrtPriceMath';\r\nconst MAX_FEE = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(6));\r\nexport class SwapMath {\r\n    /**\r\n     * Cannot be constructed.\r\n     */\r\n    constructor() { }\r\n    static computeSwapStep(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, amountRemaining, feePips) {\r\n        const returnValues = {};\r\n        const zeroForOne = JSBI.greaterThanOrEqual(sqrtRatioCurrentX96, sqrtRatioTargetX96);\r\n        const exactIn = JSBI.greaterThanOrEqual(amountRemaining, ZERO);\r\n        if (exactIn) {\r\n            const amountRemainingLessFee = JSBI.divide(JSBI.multiply(amountRemaining, JSBI.subtract(MAX_FEE, JSBI.BigInt(feePips))), MAX_FEE);\r\n            returnValues.amountIn = zeroForOne\r\n                ? SqrtPriceMath.getAmount0Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, true)\r\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, true);\r\n            if (JSBI.greaterThanOrEqual(amountRemainingLessFee, returnValues.amountIn)) {\r\n                returnValues.sqrtRatioNextX96 = sqrtRatioTargetX96;\r\n            }\r\n            else {\r\n                returnValues.sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(sqrtRatioCurrentX96, liquidity, amountRemainingLessFee, zeroForOne);\r\n            }\r\n        }\r\n        else {\r\n            returnValues.amountOut = zeroForOne\r\n                ? SqrtPriceMath.getAmount1Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, false)\r\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, false);\r\n            if (JSBI.greaterThanOrEqual(JSBI.multiply(amountRemaining, NEGATIVE_ONE), returnValues.amountOut)) {\r\n                returnValues.sqrtRatioNextX96 = sqrtRatioTargetX96;\r\n            }\r\n            else {\r\n                returnValues.sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(sqrtRatioCurrentX96, liquidity, JSBI.multiply(amountRemaining, NEGATIVE_ONE), zeroForOne);\r\n            }\r\n        }\r\n        const max = JSBI.equal(sqrtRatioTargetX96, returnValues.sqrtRatioNextX96);\r\n        if (zeroForOne) {\r\n            returnValues.amountIn =\r\n                max && exactIn\r\n                    ? returnValues.amountIn\r\n                    : SqrtPriceMath.getAmount0Delta(returnValues.sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, true);\r\n            returnValues.amountOut =\r\n                max && !exactIn\r\n                    ? returnValues.amountOut\r\n                    : SqrtPriceMath.getAmount1Delta(returnValues.sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, false);\r\n        }\r\n        else {\r\n            returnValues.amountIn =\r\n                max && exactIn\r\n                    ? returnValues.amountIn\r\n                    : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, returnValues.sqrtRatioNextX96, liquidity, true);\r\n            returnValues.amountOut =\r\n                max && !exactIn\r\n                    ? returnValues.amountOut\r\n                    : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, returnValues.sqrtRatioNextX96, liquidity, false);\r\n        }\r\n        if (!exactIn && JSBI.greaterThan(returnValues.amountOut, JSBI.multiply(amountRemaining, NEGATIVE_ONE))) {\r\n            returnValues.amountOut = JSBI.multiply(amountRemaining, NEGATIVE_ONE);\r\n        }\r\n        if (exactIn && JSBI.notEqual(returnValues.sqrtRatioNextX96, sqrtRatioTargetX96)) {\r\n            // we didn't reach the target, so take the remainder of the maximum input as fee\r\n            returnValues.feeAmount = JSBI.subtract(amountRemaining, returnValues.amountIn);\r\n        }\r\n        else {\r\n            returnValues.feeAmount = FullMath.mulDivRoundingUp(returnValues.amountIn, JSBI.BigInt(feePips), JSBI.subtract(MAX_FEE, JSBI.BigInt(feePips)));\r\n        }\r\n        return [returnValues.sqrtRatioNextX96, returnValues.amountIn, returnValues.amountOut, returnValues.feeAmount];\r\n    }\r\n}\r\n//# sourceMappingURL=swapMath.js.map","references":["/Users/luozhiwei/project/uniswap/v3-sdk-3.0.0-alpha.6/node_modules/jsbi/jsbi.d.ts","/Users/luozhiwei/project/uniswap/v3-sdk-3.0.0-alpha.6/src/constants.ts","/Users/luozhiwei/project/uniswap/v3-sdk-3.0.0-alpha.6/src/internalConstants.ts","/Users/luozhiwei/project/uniswap/v3-sdk-3.0.0-alpha.6/src/utils/fullMath.ts","/Users/luozhiwei/project/uniswap/v3-sdk-3.0.0-alpha.6/src/utils/sqrtPriceMath.ts"],"map":"{\"version\":3,\"file\":\"swapMath.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/utils/swapMath.ts\"],\"names\":[],\"mappings\":\"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\"}"}
